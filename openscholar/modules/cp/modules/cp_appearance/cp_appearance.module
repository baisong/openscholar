<?php

/**
 * @file cp_appearance.module
 *
 * Provides and handles form for cp/appearance
 */

use GitWrapper\GitWrapper;

/**
 * Implements hook_menu().
 */
function cp_appearance_menu(){
  $items = array();
  $items['cp/appearance'] = array(
    'title' => 'Appearance',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'cp_appearance_theme_picker_form'
    ),
    'weight' => 20,
    'menu_name' => 'cp',
    'access callback' => array(
      'spaces_access_admin'
    )
  );

  $items['cp/appearance/theme'] = array(
    'title' => t('Theme'),
    'page callback' => 'drupal_get_form',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'page arguments' => array(
      'cp_appearance_theme_picker_form'
    ),
    'weight' => 20,
    'menu_name' => 'cp',
    'access callback' => array(
      'spaces_access_admin'
    )
  );

  $items['cp/appearance/add-subtheme'] = array(
    'title' => 'Add subtheme',
    'page callback' => 'cp_appearance_select_method',
    'access arguments' => array('manage subtheme'),
    'type' => MENU_LOCAL_ACTION,
  );

  foreach (subtheme_types() as $key => $info) {
    // Check if there is an override function of the base form.
    $form_id = function_exists('cp_appearance_manage_' . $key) ? 'cp_appearance_manage_' . $key : 'cp_appearance_manage_base';

    $items['cp/appearance/add-subtheme/' . $key] = array(
      'title' => $info->name,
      'page callback' => 'drupal_get_form',
      'page arguments' => array($form_id, 3),
      'access arguments' => array('manage subtheme'),
    );
  }

  return $items;
}

/**
 * Implements hook_theme().
 */
function cp_appearance_theme() {
  $theme = array();

  $theme['cp-appearance-theme-item'] = array(
    'variables' => array(
      'info' => array(),
      'sub_theme' => ''
    ),
    'template' => 'cp-appearance-theme-item',
    'path' => drupal_get_path('module', 'cp_appearance') . '/theme'
  );

  $theme['cp_appearance_theme_picker_form'] = array(
    'render element' => 'form',
    'function' => 'theme_cp_appearance_theme_picker_form'
  );

  $theme['cp_appearance_add_subtheme_list'] = array();

  return $theme;
}

/**
 * Theme picker form
 */
function cp_appearance_theme_picker_form($form, &$state){
  ctools_include('themes', 'os');
  $themes = os_get_themes();
  ksort($themes);
  $radio_options = array();
  drupal_add_js(drupal_get_path('module', 'cp_appearance') . '/theme/cp_appearance_theme_picker.js');

  $form = array(
    '#title' => t('Theme Picker'),
    '#theme' => array(
      'cp_appearance_theme_picker_form'
    ),
    '#validate' => array(
      'cp_appearance_theme_picker_form_validate'
    ),
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'cp_appearance') . '/theme/cp_appearance_theme_picker.js'
      ),
      'css' => array(
        drupal_get_path('module', 'cp_appearance') . '/theme/cp-appearance-theme_picker.css'
      )
    )
  );

  foreach ( $themes as $theme ) {
    $info = $theme->info;
    $info['theme_name'] = $theme->name;
    $radio_options[$info['theme_name']] = $info['theme_name'];

    $theme_flavors = os_theme_get_flavors($theme->name);
    $elem = 'os_appearance_' . $info['theme_name'] . '_flavor';
    $default_flavor = '';

    //Get this theme's flavors and add them to the form
    $flavor_options = _cp_appearance_get_flavor_options($theme_flavors, $info, $default_flavor);
    if (count($flavor_options)) {
      $form[$elem] = array(
        '#type' => 'select',
        '#title' => t('Flavor'),
        '#options' => $flavor_options,
        '#default_value' => variable_get($elem, $default_flavor),
        '#ajax' => array(
          'callback' => 'cp_appearance_swap_screenshot',
          'wrapper' => 'screenshot_' . $theme->name
        )
      );
    }
  }

  //Move default theme to the front of the array
  $theme = os_theme_get();
  if (isset($themes[$theme])) {
    $default_theme = $themes[$theme];
    unset($themes[$theme]);
    $themes = array_merge(array(
      $theme => $default_theme
    ), $themes);
  }
  else {
    $theme = key($themes); //We should always have a default, but if not choose the first
  }

  //Add themes to form
  $form['theme_default'] = array(
    '#enabled_themes' => $themes,
    '#type' => 'radios',
    '#options' => $radio_options,
    '#default_value' => $theme,
    '#tree' => TRUE
  );

  $form = system_settings_form($form);

  return $form;
}

/**
 * Remove variables that do not need to be saved in the DB for all the unused theme-flavors
 *
 * @param $form
 * @param $form_state
 */
function cp_appearance_theme_picker_form_validate($form, &$form_state){
  $op = isset($form_state['values']['op']) ? $form_state['values']['op'] : '';

  if ($op == t('Reset to defaults')) {
    return;
  }

  $theme_default = $form_state['values']['theme_default'];
  foreach ( $form_state['values'] as $key => $value ) {
    //No need to save all the default flavor variables
    if ($key != "os_appearance_" . $theme_default . "_flavor" && substr($key, 0, 14) == "os_appearance_" && substr($key, - 7) == "_flavor") {
      unset($form_state['values'][$key]);
    }
  }
}

/**
 * Processes all the flavors a theme has.
 * 
 * @param array $theme_flavors
 *  	List of flavors used by this theme
 * @param array $info
 *  	Theme info
 * @param &string $default_flavor
 * 		Flavor to default to
 *
 * @return array
 */
function _cp_appearance_get_flavor_options($theme_flavors, $info, &$default_flavor){
  $options = array();
  if (count($theme_flavors)) {
    $options = array(
      'default' => (isset($info['flavor_name'])) ? $info['flavor_name'] : t('Default ')
    );
    $options['default'] .= t(' (Default)');

    foreach ( $theme_flavors as $key => $flavor ) {
      if (isset($flavor['flavor_name'])) {
        $options[$key] = $flavor['flavor_name'];
        $default_flavor = $key;
      }
      else {
        $options[$key] = $flavor['name'];
      }
    }
  }

  return $options;
}

/**
 * Themes the theme_picker form
 */
function theme_cp_appearance_theme_picker_form($variables){
  $form = $variables['form'];
  $output = drupal_render($form['theme_default']);
  $items = array();

  foreach ($form['theme_default']['#enabled_themes'] as $theme) {
    $sub_theme = '';
    $info = array_merge((array) $theme->info, array(
      'theme_name' => $theme->name
    ));

    //flavor screenshots
    $key = 'os_appearance_' . $theme->name . '_flavor';
    if (array_key_exists($key, $form)) {
      $sub_theme = drupal_render($form[$key]);

      if ($flavor = $form[$key]['#default_value']) {
        $flavors = os_theme_get_flavors();

        if (array_key_exists($flavor, $flavors) && array_key_exists('screenshot', $flavors[$flavor]) && $flavors[$flavor]['module'] == $theme->name) {
          $info['screenshot'] = $flavors[$flavor]['path'] . '/' . $flavors[$flavor]['screenshot'];
        }
      }
    }

    //list of screenshots for each theme
    $items[] = array(
      'class' => array(
        'item-theme-picker',
        ($theme->name == $form['theme_default']['#default_value']) ? 'current' : ''
      ),
      'id' => 'theme-' . str_replace('_', '-', $theme->name),
      'data' => theme('cp-appearance-theme-item', array(
        'info' => $info,
        'sub_theme' => $sub_theme
      ))
    );
  }

  $output .= theme_item_list(array(
    'items' => $items,
    'type' => 'ul',
    'title' => NULL,
    'attributes' => array(
      'class' => 'theme-picker'
    )
  ));
  unset($form['#theme']);
  $output .= drupal_render($form);

  return $output;
}

/**
 * menu item takes a flavor and returns its screenshot via ajax
 */
function cp_appearance_swap_screenshot($form, &$state){
  ctools_include('themes', 'os');

  $trigger = $state['triggering_element']['#name'];
  $flavor = $state['values'][$trigger];

  $flavors = os_theme_get_flavors();
  if (array_key_exists($flavor, $flavors)) {
    $path = $flavors[$flavor]['path'] . '/' . $flavors[$flavor]['screenshot'];
    $module = $flavors[$flavor]['module'];
  }

  //no screenshot or flavor.  just use the default
  if (! ($path && file_exists($path))) {
    $module = str_replace('os_appearance_', '', $trigger);
    $module = str_replace('_flavor', '', $module);
    $theme = os_get_themes($module);
    $path = $theme->info['screenshot'];
  }

  return theme('image', array(
    'path' => $path,
    'alt' => t('Screenshot for %theme theme', array(
      '%theme' => $module
    )),
    'title' => '',
    'attributes' => array(
      'class' => 'screenshot',
      'id' => 'screenshot_' . $module
    ),
    'getsize' => FALSE
  ));
}


function cp_appearance_cp_settings() {
  $setting['disable_responsive'] = array(
    'group' => array(
      '#title' => t('Responsive'),
      '#id' => 'responsive',
    ),
    'form' => array(
      '#type' => 'checkbox',
      '#default_value' => variable_get('disable_responsive', false),
      '#title' => t('Disable responsive behaviors'),
      '#description' => t('Responsive behaviors will change the layout of your page to fit the screens of smaller devices, such
        as phones or tablets. Disabling this will prevent the layout from changing, but could make using your site more difficult
        on smaller devices.'),
    )
  );

  return $setting;
}

function cp_appearance_page_alter(&$page) {
  if (context_isset('context', 'os_public') && !variable_get('disable_responsive', false)) {
    $path = drupal_get_path('theme', 'hwpi_basetheme').'/css/';
    drupal_add_css($path.'responsive.base.css');
    drupal_add_css($path.'responsive.layout.css');
    drupal_add_css($path.'responsive.nav.css');
    drupal_add_css($path.'responsive.slideshow.css');
    drupal_add_css($path.'responsive.widgets.css');
  }
}

// Subtheme.


/**
 * Implements hook_admin_paths().
 */
function cp_appearance_admin_paths() {
  return array(
    'cp/appearance/add-subtheme' => TRUE,
    'cp/appearance/add-subtheme/*' => TRUE,
  );
}

/**
 * Implements hook_permission().
 */
function cp_appearance_permission() {
  return array(
    'manage subtheme' => array(
      'title' => t('Add subtheme'),
      'description' => t('Allow the user to add subtheme.'),
    ),
  );
}

/**
 * Theme function - selecting the
 */
function theme_cp_appearance_add_subtheme_list($variables) {
  $types = $variables['types'];

  if ($types) {
    $output = '<ul class="admin-list">';
    foreach ($types as $type => $info) {
      $output .= '<li class="clearfix">';
      $output .= '<span class="label">' . l($info->name, 'cp/appearance/add-subtheme/' . $type) . '</span>';
      $output .= '<div class="description">' . filter_xss_admin($info->description) . '</div>';
      $output .= '</li>';
    }
    $output .= '</ul>';
  }
  else {
    $output = '<p>' . t('There is no subtheme types. Go to the <a href="@url">subtheme types create page</a> to add a new subtheme type.', array('@url' => url('admin/structure/subtheme'))) . '</p>';
  }

  return $output;
}

/**
 * List of subtheme types.
 */
function subtheme_types() {
  $types = array();

  $types['zip'] = (object)array(
    'name' => t('Zip'),
    'description' => t('Upload zip files.'),
  );

  $types['git'] = (object)array(
    'name' => t('Git'),
    'description' => t('Clone from a repository.'),
  );

  return $types;
}

/**
 * Select method for uploading the subtheme.
 */
function cp_appearance_select_method() {
  $types = subtheme_types();

  return theme('cp_appearance_add_subtheme_list', array(
    'types' => $types,
  ));
}

/**
 * Editing a basic sub theme.
 */
function cp_appearance_manage_base($form, &$form_state) {
  $form['file'] = array(
    '#title' => t('Themes'),
    '#type' => 'managed_file',
    '#description' => t('The uploaded image will be displayed on this page using the image style choosen below.'),
    '#required' => TRUE,
    '#upload_location' => 'public://',
    '#upload_validators' => array(
      'file_validate_extensions' => array('zip'),
    ),
    '#weight' => -99,
  );

  $form['actions'] = array(
    '#type' => 'actions',
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Save'),
    ),
    'cancel' => array(
      '#type' => 'markup',
      '#markup' => l(t('Cancel'), 'cp/appearance/add-subtheme'),
    ),
  );

  return $form;
}

/**
 * Validate function - verify the subtheme based on a theme.
 */
function cp_appearance_manage_base_validate($form, $form_state) {
  $subtheme = new SubTheme($form_state['values']['file']);

  $subtheme->extract();
  $info = $subtheme->parseInfo();

  cp_appearance_validate_subtheme($info, 'file');
}

/**
 * Validate the subtheme before creating the subtheme entity.
 *
 * @param $info
 *  The parsed info file.
 * @param $form_element_name
 *  The form element.
 * @param bool $in_form
 *  Define if the validation is happening in a form. Used for set form errors.
 *  When validation is not happening in a form set to FALSE.
 *
 * @return bool
 *  Return true or false if the subtheme is validated or not.
 */
function cp_appearance_validate_subtheme($info, $form_element_name, $in_form = TRUE) {
  $themes = list_themes();

  if (empty($info['module'])) {
    if ($in_form) {
      form_set_error($form_element_name, t('The theme you uploaded is not valid: theme name to be based on is missing.'));
    }

    return FALSE;
  }
  else if (!in_array($info['module'], array_keys($themes))) {
    if ($in_form) {
      form_set_error($form_element_name, t('The theme you uploaded is not valid: the base theme is not listed in the theme list.'));
    }

    return FALSE;
  }

  return TRUE;
}

/**
 * Editing or creating a new sub theme.
 */
function cp_appearance_manage_base_submit($form, &$form_state) {
  $file = new Subtheme($form_state['values']['file']);

  $vsite = vsite_get_vsite();
  $flavors = $vsite->controllers->variable->get('flavors');

  // Parse the info.
  $info = $file->parseInfo();

  // Save the path of the extracted theme for later.
  $flavors[$info['theme name']] = array(
    'path' => $file->extractPath,
    'name' => $info['name'],
  );

  $vsite->controllers->variable->set('flavors', $flavors);

  $form_state['redirect'] = 'cp/appearance';
}

/**
 * Adding a theme - git.
 */
function cp_appearance_manage_git($form, $form_state, $type) {
  // Adding the git library.
  require_once libraries_get_path('git') . '/autoload.php';

  // Get the name of the current vsite so we can create a library to clone into
  // the themes via GIT.
  $form['repository'] = array(
    '#type' => 'textfield',
    '#title' => t('Git repository address'),
    '#description' => t('Enter the repository address'),
    '#required' => TRUE,

    '#ajax' => array(
      'callback' => 'cp_appearance_git_method_get_ajax_branches',
      'wrapper' => 'branches',
      'method' => 'replace',
    ),
  );

  $repository_address = !empty($form_state['values']['repository']) ? $form_state['values']['repository'] : 0;

  $form['branch'] = array(
    '#type' => 'select',
    '#title' => t('Branch'),
    '#description' => t('Enter the branch of the git repository'),
    '#prefix' => '<div id="branches">',
    '#suffix' => '</div>',
    '#options' => array(
      '---' => t(' --- Select a branch --- '),
    ),

    '#ajax' => array(
      'callback' => 'cp_appearance_git_method_get_valid_branches',
      'wrapper' => 'branches',
    ),
  );

  if ($repository_address) {
    $wrapper = new GitWrapper();
    $wrapper->setPrivateKey('.');

    if (empty($form_state['#git_path'])) {
      $path = drupal_realpath('public://') . '/git/' . time();
      $form_state['#git_path'] = $path;

      // Clone the repo.
      $clone = TRUE;
    }
    else {
      $path = $form_state['#git_path'];
      // Don't clone the repo. We already have it.
      $clone = FALSE;
    }

    $git = $wrapper->workingCopy($path);

    // This will let us know if the repo. was cloned and will not clone the
    // repo. every time the user change the branch.
    if ($clone) {
      $git->clone($repository_address);
    }

    $branches = array();

    foreach ($git->getBranches()->remote() as $branch) {
      if (strpos($branch, ' -> ') !== FALSE) {
        // A branch named "origin/HEAD  -> xyz" is provided by the class, we
        // don't need him.
        continue;
      }

      $branches[str_replace(" ", "_", $branch)] = $branch;
    }

    $form['branch']['#options'] = array('---' => t(' --- Select a branch --- ')) + $branches;

    $subtheme = new SubTheme();
    $subtheme->path = $path;
    $form_state['subtheme'] = $subtheme;
  }

  $repository_branch = !empty($form_state['values']['branch']) ? $form_state['values']['branch'] : 0;

  if ($repository_branch != '---') {
    $git->checkout($repository_branch);
  }

  $form['actions'] = array(
    '#type' => 'actions',
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Save'),
    ),
  );

  return $form;
}

/**
 * Return piece of the form for AJAX rendering.
 */
function cp_appearance_git_method_get_ajax_branches($form, $form_state) {
  return $form['branch'];
}

/**
 * Return piece of the form for AJAX rendering.
 */
function cp_appearance_git_method_get_valid_branches($form, $form_state) {
  return $form['branch'];
}

/**
 * Validate handler - verify the user selected a branch.
 */
function cp_appearance_manage_git_validate($form, $form_state) {
  if ($form_state['values']['branch'] == '---') {
    form_set_error('branch', t('Select a branch.'));
    return;
  }

  if (empty($form_state['subtheme'])) {
    return;
  }

  $subtheme = $form_state['subtheme'];

  $info = $subtheme->parseInfo();

  cp_appearance_validate_subtheme($info, 'branch');
}

/**
 * Submit handler - create the git subtheme entity.
 */
function cp_appearance_manage_git_submit($form, &$form_state) {
  if (empty($form_state['subtheme'])) {
    return;
  }

  $file = $form_state['subtheme'];

  $vsite = vsite_get_vsite();
  $flavors = $vsite->controllers->variable->get('flavors');

  // Parse the info.
  $info = $file->parseInfo();

  // When cloning via git the path os not relative. Remove the DRUPAL_ROOT from
  // the path.
  $file->path = str_replace(DRUPAL_ROOT . '/', '', $file->path);

  // Save the path of the extracted theme for later.
  $flavors[$info['theme name']] = array(
    'path' => $file->path,
    'name' => $info['name'],
  );

  $vsite->controllers->variable->set('flavors', $flavors);

  $form_state['redirect'] = 'cp/appearance';
}

/**
 * Search of the flavors uploaded to the vsite.
 */
function cp_appearance_get_flavors() {
  if (!$vsite = vsite_get_vsite()) {
    return array();
  }
  $flavors = array();

  foreach ($vsite->controllers->variable->get('flavors') as $name => $info) {
    $info_files = glob($info['path'] . '/*.flav');
    $info_file = reset($info_files);

    // Get the information from the info file.
    $file_content = drupal_parse_info_file($info_file);

    $flavors[$name] = $file_content + array(
      'path' => $info['path'],
    );
  }

  return $flavors;
}
